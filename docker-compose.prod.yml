# Production Docker Compose for Multi-Cloud Deployment
version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
    ports:
      - "${PORT:-8080}:${PORT:-8080}"
    environment:
      - NODE_ENV=production
      - MONGO_URL=${MONGO_URL:-mongodb://mongo:27017}
      - DB_NAME=${DB_NAME:-clinical_assistant}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - PORT=${PORT:-8080}
    depends_on:
      mongo:
        condition: service_healthy
    volumes:
      - app_uploads:/app/backend/uploads
      - app_logs:/var/log
    restart: unless-stopped
    healthcheck:
      test: ["/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app_network

  mongo:
    image: mongo:7.0
    environment:
      - MONGO_INITDB_DATABASE=${DB_NAME:-clinical_assistant}
    volumes:
      - mongo_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.admin Command('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app_network
    # Only expose mongo port in development
    # ports:
    #   - "27017:27017"

  # Optional: Redis for session management (for scaling)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app_network
    volumes:
      - redis_data:/data

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local

networks:
  app_network:
    driver: bridge