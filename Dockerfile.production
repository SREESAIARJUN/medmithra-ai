# Production Multi-Cloud Docker Image for Clinical Insight Assistant
# Compatible with AWS ECS, GCP Cloud Run, Azure Container Instances, and local deployment

# Stage 1: Build Frontend
FROM node:18-alpine AS frontend-builder
WORKDIR /app
COPY frontend/package*.json ./
RUN npm ci --only=production
COPY frontend/ ./
RUN npm run build

# Stage 2: Build Backend Dependencies
FROM python:3.11-slim AS backend-builder
WORKDIR /app
# Install system dependencies for building Python packages
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*
COPY backend/requirements.txt ./
RUN pip install --no-cache-dir --user -r requirements.txt

# Stage 3: Production Runtime
FROM python:3.11-slim AS production

# Set labels for multi-cloud compatibility
LABEL maintainer="Clinical Insight Assistant"
LABEL version="1.0.0"
LABEL description="AI-powered clinical decision support platform"

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    nginx \
    supervisor \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PATH=/home/appuser/.local/bin:$PATH

# Copy Python dependencies from builder
COPY --from=backend-builder /root/.local /home/appuser/.local

# Set working directory
WORKDIR /app

# Copy backend code
COPY backend/ ./backend/
RUN chown -R appuser:appuser /app/backend

# Copy frontend build
COPY --from=frontend-builder /app/build ./frontend/build

# Create required directories
RUN mkdir -p /app/backend/uploads /var/log/supervisor /var/log/nginx \
    && chown -R appuser:appuser /app/backend/uploads \
    && chown -R appuser:appuser /var/log/supervisor

# Copy configuration files
COPY docker/nginx.prod.conf /etc/nginx/nginx.conf
COPY docker/supervisord.prod.conf /etc/supervisor/conf.d/supervisord.conf

# Health check script
COPY docker/healthcheck.sh /usr/local/bin/healthcheck.sh
RUN chmod +x /usr/local/bin/healthcheck.sh

# Expose port (configurable for cloud platforms)
EXPOSE ${PORT:-8080}

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD /usr/local/bin/healthcheck.sh

# Use non-root user
USER appuser

# Start supervisor
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]